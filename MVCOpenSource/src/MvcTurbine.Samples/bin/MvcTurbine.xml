<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvcTurbine</name>
    </assembly>
    <members>
        <member name="T:MvcTurbine.Blades.Blade">
            <summary>
            Defines the base implementation of a component within a <see cref="T:MvcTurbine.RotorContext"/>.
            </summary>
        </member>
        <member name="T:MvcTurbine.Blades.IBlade">
            <summary>
            Defines the contract for all blades (components) to use.
            </summary>
        </member>
        <member name="M:MvcTurbine.Blades.IBlade.Initialize(MvcTurbine.RotorContext)">
            <summary>
            Initializes the component
            </summary>
            <param name="context">Current context for the <see cref="T:MvcTurbine.Blades.Blade"/> instance.</param>
        </member>
        <member name="M:MvcTurbine.Blades.IBlade.Execute(MvcTurbine.RotorContext)">
            <summary>
            Executes the current component.
            </summary>
        </member>
        <member name="M:MvcTurbine.Blades.Blade.Dispose">
            <summary>
            Cleans up the current component.
            </summary>
        </member>
        <member name="M:MvcTurbine.Blades.Blade.InvokeInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MvcTurbine.Blades.Blade.Initialized"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MvcTurbine.Blades.Blade.InvokeDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MvcTurbine.Blades.Blade.Disposed"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MvcTurbine.Blades.Blade.Initialize(MvcTurbine.RotorContext)">
            <summary>
            Initializes the component
            </summary>
            <param name="context">Current context for the <see cref="T:MvcTurbine.Blades.Blade"/> instance.</param>
        </member>
        <member name="M:MvcTurbine.Blades.Blade.Execute(MvcTurbine.RotorContext)">
            <summary>
            Executes the current component.
            </summary>
        </member>
        <member name="E:MvcTurbine.Blades.Blade.Initialized">
            <summary>
            Informs registrants of the initialization of the component.
            </summary>
        </member>
        <member name="E:MvcTurbine.Blades.Blade.Disposed">
            <summary>
            Informs the registrants of the disposing of the component.
            </summary>
        </member>
        <member name="M:MvcTurbine.Blades.MvcBlade.SetupModelBinders(MvcTurbine.RotorContext)">
            <summary>
             Changes the <see cref="P:System.Web.Mvc.ModelBinderDictionary.DefaultBinder"/> instance to be <see cref="T:MvcTurbine.Models.TurbineModelBinder"/>.
            </summary>
            <param name="context">Current <see cref="T:MvcTurbine.RotorContext"/> performing the execution.</param>
        </member>
        <member name="M:MvcTurbine.Blades.MvcBlade.SetupControllerFactory(MvcTurbine.RotorContext)">
            <summary>
            Sets the instance of <see cref="T:System.Web.Mvc.IControllerFactory"/> to use.  If one is not registered,
            <see cref="T:MvcTurbine.Controllers.TurbineControllerFactory"/> is used.
            </summary>
        </member>
        <member name="T:MvcTurbine.Controllers.TurbineActionInvoker">
            <summary>
            Defines a custom <see cref="T:System.Web.Mvc.ControllerActionInvoker"/> to use that will 
            infer actions that are not defined.
            </summary>
        </member>
        <member name="M:MvcTurbine.Controllers.TurbineActionInvoker.#ctor(MvcTurbine.ComponentModel.IServiceLocator)">
            <summary>
             Creates a new instance of the <see cref="T:System.Web.Mvc.ControllerActionInvoker"/> that 
             provides action execution for the controller
            </summary>
            <param name="locator"></param>
        </member>
        <member name="M:MvcTurbine.Controllers.TurbineActionInvoker.FindAction(System.Web.Mvc.ControllerContext,System.Web.Mvc.ControllerDescriptor,System.String)">
            <summary>
            Finds the action for the controller, if not it is inferred.
            </summary>
            <param name="controllerContext"></param>
            <param name="controllerDescriptor"></param>
            <param name="actionName"></param>
            <returns></returns>
        </member>
        <member name="P:MvcTurbine.Controllers.TurbineActionInvoker.ServiceLocator">
            <summary>
            Gets the current instance of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>.
            </summary>
        </member>
        <member name="T:MvcTurbine.ComponentModel.AutoRegistrationTable">
            <summary>
             Defines a list of auto-registrations for the system process.
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.AutoRegistrationTable.#ctor">
            <summary>
            Public default constructor.
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.AutoRegistrationTable.AddRegistration``1(MvcTurbine.ComponentModel.ServiceReg)">
            <summary>
            Adds a registration of service type <typeparamref name="TService"/> to the list
            with the specified handler.
            </summary>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="M:MvcTurbine.ComponentModel.AutoRegistrationTable.AddRegistration(System.Type,MvcTurbine.ComponentModel.ServiceReg)">
            <summary>
            Adds a registration of the specified service to the list for processing.
            </summary>
            <param name="service">Type of service to auto register.</param>
            <param name="serviceReg">CurrentContext handler that process regisration</param>
        </member>
        <member name="M:MvcTurbine.ComponentModel.AutoRegistrationTable.Clear">
            <summary>
            Clears the current list of registrations
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.AutoRegistrationTable.Dispose">
            <summary>
            Disposes the current instance of the object.
            </summary>
        </member>
        <member name="P:MvcTurbine.ComponentModel.AutoRegistrationTable.Registrations">
            <summary>
            Gets the list registrations.
            </summary>
        </member>
        <member name="T:MvcTurbine.ComponentModel.AssemblyFilter">
            <summary>
            Defines a list of filters to apply to an assembly name.
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.AssemblyFilter.#ctor">
            <summary>
            Public default constructor.
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.AssemblyFilter.AddFilter(System.String)">
            <summary>
            Adds the specified filter to the list if not previously added.
            </summary>
            <param name="filter">Filter to add into the list.</param>
        </member>
        <member name="M:MvcTurbine.ComponentModel.AssemblyFilter.Clear">
            <summary>
            Clears the list of registered filters.
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.AssemblyFilter.Match(System.String)">
            <summary>
            Checks whether <paramref name="assemblyName"/> matches the filter list.
            </summary>
            <param name="assemblyName">Name of the assembly to check.</param>
            <returns>True if match, false otherise.</returns>
        </member>
        <member name="P:MvcTurbine.ComponentModel.AssemblyFilter.Filters">
            <summary>
            Gets or sets the list for the filters.
            </summary>
        </member>
        <member name="T:MvcTurbine.ComponentModel.CommonAssemblyFilter">
            <summary>
            Defines common assemblies to filter. These assemblies are:
                System, mscorlib, Microsoft, WebDev, CppCodeProvider).
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.CommonAssemblyFilter.#ctor">
            <summary>
            Creates an instance and applies the default filters.
            Sets the following filters as default, (System, mscorlib, Microsoft, WebDev, CppCodeProvider).
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.CommonAssemblyFilter.AddDefaults">
            <summary>
            Sets the following filters as default, (System, mscorlib, Microsoft, WebDev, CppCodeProvider).
            </summary>
        </member>
        <member name="T:MvcTurbine.Models.TurbineModelBinder">
            <summary>
            Default <see cref="T:System.Web.Mvc.IModelBinder"/> to use within an application.
            </summary>
        </member>
        <member name="M:MvcTurbine.Models.TurbineModelBinder.#ctor(MvcTurbine.ComponentModel.IServiceLocator)">
            <summary>
            Default constructor
            </summary>
            <param name="locator"></param>
        </member>
        <member name="P:MvcTurbine.Models.TurbineModelBinder.ServiceLocator">
            <summary>
            Gets the current ServiceLocator associated with this binder
            </summary>
        </member>
        <member name="T:MvcTurbine.ComponentModel.IComponentRegistration">
            <summary>
            Provides a simple way register components within your application.
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IComponentRegistration.Register(MvcTurbine.ComponentModel.IServiceLocator)">
            <summary>
            Registers the components with the specified <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> instance.
            </summary>
            <param name="locator">Instance of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> to use.</param>
        </member>
        <member name="T:MvcTurbine.ComponentModel.ServiceReg">
            <summary>
            Defines a way to setup registration for the specified serviceType within the specified <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> instance.
            </summary>
            <param name="locator">Instance of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> to use.</param>
            <param name="serviceType">The type to register</param>
        </member>
        <member name="T:MvcTurbine.Routing.IRouteConfigurator">
            <summary>
            Provides a simple way to register routes within your application.
            </summary>
        </member>
        <member name="M:MvcTurbine.Routing.IRouteConfigurator.RegisterRoutes(System.Web.Routing.RouteCollection)">
            <summary>
            Registers routes within <see cref="T:System.Web.Routing.RouteCollection"/> for the application.
            </summary>
            <param name="routes">The <see cref="T:System.Web.Routing.RouteCollection"/> from the <see cref="P:System.Web.Routing.RouteTable.Routes"/>.</param>
        </member>
        <member name="T:MvcTurbine.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MvcTurbine.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MvcTurbine.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MvcTurbine.Properties.Resources.ServiceLocatorExceptionMessage">
             <summary>
               Looks up a localized string similar to MVC Turbine cannot start!
            You need to specify a valid IServiceLocator for the system to use!
            
            Check the result of your registered ServiceLocatorProvider to see if it&apos;s valid..
             </summary>
        </member>
        <member name="P:MvcTurbine.Properties.Resources.ServiceLocatorProviderExceptionMessage">
             <summary>
               Looks up a localized string similar to MVC Turbine cannot start!
            You must specify a ServiceLocatorProvider to resolve a IServiceLocator for the system to use.  To specify a ServiceLocatorProvider, make sure you call
            
                ServiceLocatorManager.SetLocatorProvider(() =&gt; YOUR PROVIDER)
                
            Within the static constructor of your Global.asax.
             </summary>
        </member>
        <member name="T:MvcTurbine.Controllers.InferredParameterDescriptor">
            <summary>
            Wrapper class defines the type of parameter to use with the <see cref="T:MvcTurbine.Controllers.InferredActionDescriptor"/>.
            </summary>
        </member>
        <member name="M:MvcTurbine.Controllers.InferredParameterDescriptor.#ctor(System.Web.Mvc.ActionDescriptor,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="descriptor"></param>
            <param name="parameterName"></param>
        </member>
        <member name="P:MvcTurbine.Controllers.InferredParameterDescriptor.ActionDescriptor">
            <summary>
            See <see cref="P:System.Web.Mvc.ParameterDescriptor.ActionDescriptor"/>.
            </summary>
        </member>
        <member name="P:MvcTurbine.Controllers.InferredParameterDescriptor.ParameterName">
            <summary>
            Returns the name of the executing action.
            </summary>
        </member>
        <member name="P:MvcTurbine.Controllers.InferredParameterDescriptor.ParameterType">
            <summary>
            Returns <see cref="T:System.String"/> as the default type.
            </summary>
        </member>
        <member name="T:MvcTurbine.ComponentModel.IServiceLocator">
            <summary>
            Provides a simple interface for resolving and registering components within
            the application.
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Resolve``1">
            <summary>
            Resolves the service of the specified type.
            </summary>
            <typeparam name="T">Type of service to resolve.</typeparam>
            <returns>An instance of the type, null otherwise.</returns>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Resolve``1(System.String)">
            <summary>
            Resolves the service of the specified type by the given string key.
            </summary>
            <typeparam name="T">Type of service to resolve.</typeparam>
            <param name="key">Unique key to distinguish the service.</param>
            <returns>An instance of the type, null otherwise.</returns>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Resolve``1(System.Type)">
            <summary>
            Resolves the service of the specified type by the given type key.
            </summary>
            <typeparam name="T">Type of service to resolve.</typeparam>
            <param name="type">Key type of the service.</param>
            <returns>An instance of the type, null otherwise.</returns>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.ResolveServices``1">
            <summary>
            Resolves the list of services of type <see cref="!:T"/> that are registered 
            within the locator.
            </summary>
            <typeparam name="T">Type of the service to resolve.</typeparam>
            <returns>A list of service of type <see cref="!:T"/>, null otherwise.</returns>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Unregister``1">
            <summary>
            Unregisters services of type <see cref="!:Interface"/> from the locator.
            </summary>
            <typeparam name="Interface">Type of the service to unregister.</typeparam>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Unregister``1(System.String)">
            <summary>
            Unregisters services of type <see cref="!:Interface"/> from the locator by the given 
            string key.
            </summary>
            <typeparam name="Interface">Type of the service to unregister.</typeparam>
            <param name="key">Unique key to distinguish the service.</param>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Register``1(System.Type)">
            <summary>
            Registers the implemation type, <paramref name="implType"/>, with the locator under
            the <see cref="!:Interface"/> service type.
            </summary>
            <typeparam name="Interface">Type of the service to register.</typeparam>
            <param name="implType">Implementation type to use for registration.</param>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Register``2">
            <summary>
            Registers the implemation type, <see cref="!:Implementation"/>, with the locator under
            the <see cref="!:Interface"/> service type.
            </summary>
            <typeparam name="Interface">Type of the service to register.</typeparam>
            <typeparam name="Implementation">Implementation type to use for registration.
            </typeparam>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Register``2(System.String)">
            <summary>
            Registers the implemation type, <see cref="!:Implementation"/>, with the locator under
            the <see cref="!:Interface"/> service type.
            </summary>
            <typeparam name="Interface">Type of the service to register.</typeparam>
            <typeparam name="Implementation">Implementation type to use for registration.
            </typeparam>
            <param name="key">Unique key to distinguish the service.</param>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.RegisterSingleton``2">
            <summary>
            Registers the implemation type, <see cref="!:Implementation"/>, with the locator under
            the <see cref="!:Interface"/> service type as a Singleton.
            </summary>
            <typeparam name="Interface">Type of the service to register.</typeparam>
            <typeparam name="Implementation">Implementation type to use for registration.
            </typeparam>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Register(System.String,System.Type)">
            <summary>
            Registers the implementation type, <paramref name="type"/>, with the locator
            by the given string key.
            </summary>
            <param name="key">Unique key to distinguish the service.</param>
            <param name="type">Implementation type to use.</param>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Release(System.Object)">
            <summary>
            Releases (disposes) the service instance from within the locator.
            </summary>
            <param name="instance">Instance of a service to dipose from the locator.</param>
        </member>
        <member name="M:MvcTurbine.ComponentModel.IServiceLocator.Reset">
            <summary>
            Resets the locator to its initial state clearing all registrations.
            </summary>
        </member>
        <member name="M:MvcTurbine.Blades.RoutingBlade.ProcessRouteConfigurators(MvcTurbine.RotorContext)">
            <summary>
            Iterates through all the registered <see cref="T:MvcTurbine.Routing.IRouteConfigurator"/> instances
            and wires them up with <see cref="P:System.Web.Routing.RouteTable.Routes"/>.
            </summary>
        </member>
        <member name="T:MvcTurbine.Controllers.TurbineControllerFactory">
            <summary>
            Controller Factory class for instantiating controllers using the Windsor IoC container.
            </summary>
        </member>
        <member name="M:MvcTurbine.Controllers.TurbineControllerFactory.#ctor(MvcTurbine.ComponentModel.IServiceLocator)">
            <summary>
            Creates a new instance of the <see cref="T:MvcTurbine.Controllers.TurbineControllerFactory"/> class.
            </summary>
            <param name="serviceLocator">The <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> to use when 
            creating controllers.</param>
        </member>
        <member name="M:MvcTurbine.Controllers.TurbineControllerFactory.GetControllerInstance(System.Type)">
            <summary>
            Provides the implementation of <see cref="T:System.Web.Mvc.IController"/> from the current
            <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>.
            </summary>
            <param name="controllerType">Type of controller to search for.</param>
            <returns>An instance of <see cref="T:System.Web.Mvc.IController"/> from the container.</returns>
        </member>
        <member name="M:MvcTurbine.Controllers.TurbineControllerFactory.ReleaseController(System.Web.Mvc.IController)">
            <summary>
            Releases the controller by giving it back to <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>.
            </summary>
            <param name="controller">Controller to dispose.</param>
        </member>
        <member name="P:MvcTurbine.Controllers.TurbineControllerFactory.ServiceLocator">
            <summary>
            Gets the current instance of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> for the factory.
            </summary>
        </member>
        <member name="M:MvcTurbine.ITurbineApplication.Startup">
            <summary>
            Performs any startup processing.
            </summary>
        </member>
        <member name="M:MvcTurbine.ITurbineApplication.Shutdown">
            <summary>
            Shuts down the current application.
            </summary>
        </member>
        <member name="M:MvcTurbine.ITurbineApplication.GetContext">
            <summary>
            Gets the instance of <see cref="T:MvcTurbine.RotorContext"/> that is registered with the 
            <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>. 
            </summary>
            <returns>The registered <see cref="T:MvcTurbine.RotorContext"/>, 
            otherwise a default <see cref="T:MvcTurbine.RotorContext"/> is used.</returns>
        </member>
        <member name="P:MvcTurbine.ITurbineApplication.ServiceLocator">
            <summary>
            Gets or sets the current implementation of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>
            the application instance will use.
            </summary>
        </member>
        <member name="P:MvcTurbine.ITurbineApplication.CurrentContext">
            <summary>
            Gets or sets the current <see cref="T:MvcTurbine.RotorContext"/> for the application instance to use.
            </summary>
        </member>
        <member name="E:MvcTurbine.ITurbineApplication.Initialized">
            <summary>
            Fires off when the application is initialized
            </summary>
        </member>
        <member name="T:MvcTurbine.ComponentModel.IAutoRegistrator">
            <summary>
             Defines the process of doing auto registration of a specified service type.
            </summary>
        </member>
        <member name="T:MvcTurbine.TurbineApplication">
            <summary>
            Class that provides the simple IoC support for ASP.NET MVC.
            </summary>
        </member>
        <member name="M:MvcTurbine.TurbineApplication.Application_Start">
            <summary>
            Sets up one-time only execution for the application.
            </summary>
        </member>
        <member name="M:MvcTurbine.TurbineApplication.PostServiceLocatorAcquisition">
            <summary>
            Executed after the <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> has been acquired.
            </summary>
        </member>
        <member name="M:MvcTurbine.TurbineApplication.ExecuteContext">
            <summary>
            Initializes and execute the current <see cref="T:MvcTurbine.RotorContext"/>.
            </summary>
        </member>
        <member name="M:MvcTurbine.TurbineApplication.Startup">
            <summary>
            Performs any startup processing.
            </summary>
        </member>
        <member name="M:MvcTurbine.TurbineApplication.Shutdown">
            <summary>
            Shuts down the current application.
            </summary>
        </member>
        <member name="M:MvcTurbine.TurbineApplication.Init">
            <summary>
            Initializes the current <see cref="T:System.Web.HttpApplication"/>.
            </summary>
        </member>
        <member name="M:MvcTurbine.TurbineApplication.InvokeInitialized(MvcTurbine.ITurbineApplication)">
            <summary>
            Invokes the registered event handlers for the <see cref="T:MvcTurbine.AppInit"/> delegate.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:MvcTurbine.TurbineApplication.GetContext">
            <summary>
            Gets the instance of <see cref="T:MvcTurbine.RotorContext"/> that is registered with the 
            <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>. 
            </summary>
            <returns>The registered <see cref="T:MvcTurbine.RotorContext"/>, otherwise a default <see cref="T:MvcTurbine.RotorContext"/> is used.</returns>
        </member>
        <member name="M:MvcTurbine.TurbineApplication.GetServiceLocator">
            <summary>
            Gets the instance of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> that is registered with
            <see cref="M:MvcTurbine.ComponentModel.ServiceLocatorManager.SetLocatorProvider(MvcTurbine.ComponentModel.ServiceLocatorProvider)"/>.
            </summary>
        </member>
        <member name="P:MvcTurbine.TurbineApplication.ServiceLocator">
            <summary>
            Gets or sets the current implementation of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>
            the application instance will use.
            </summary>
        </member>
        <member name="P:MvcTurbine.TurbineApplication.CurrentContext">
            <summary>
            Gets or sets the current <see cref="T:MvcTurbine.RotorContext"/> for the application instance to use.
            </summary>
        </member>
        <member name="E:MvcTurbine.TurbineApplication.Initialized">
            <summary>
            Raises the initialization event
            </summary>
        </member>
        <member name="T:MvcTurbine.ComponentModel.ServiceLocatorProvider">
            <summary>
            Defines the resolutioon delegate to obtain an instance of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>.
            </summary>
            <remarks>
            This class is modelled after the ServiceLocator class of the Common ServiceLocator hosted
            on CodePlex at http://commonservicelocator.codeplex.com
            </remarks>
            <returns></returns>
        </member>
        <member name="T:MvcTurbine.ComponentModel.ServiceLocatorManager">
            <summary>
            Utility class for accessing the default registered instance of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>.
            </summary>
        </member>
        <member name="M:MvcTurbine.ComponentModel.ServiceLocatorManager.SetLocatorProvider(MvcTurbine.ComponentModel.ServiceLocatorProvider)">
            <summary>
            Sets the current instance of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> by using the specified
            resolution delegate.
            </summary>
            <param name="newProvider">Resolution delegate that will obtain the instance of 
            <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>.</param>
        </member>
        <member name="P:MvcTurbine.ComponentModel.ServiceLocatorManager.Current">
            <summary>
            Gets the current registered instance of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>.
            </summary>
            <remarks>To register an instance use the <see cref="M:MvcTurbine.ComponentModel.ServiceLocatorManager.SetLocatorProvider(MvcTurbine.ComponentModel.ServiceLocatorProvider)"/> method.</remarks>
        </member>
        <member name="T:MvcTurbine.Controllers.InferredActionDescriptor">
            <summary>
            Custom implementation of <see cref="T:System.Web.Mvc.ActionDescriptor"/> to wire up inferred action execution.
            </summary>
        </member>
        <member name="M:MvcTurbine.Controllers.InferredActionDescriptor.#ctor(System.String,System.Web.Mvc.ControllerDescriptor)">
            <summary>
            See <see cref="T:System.Web.Mvc.ActionDescriptor"/>
            </summary>
            <param name="actionName"></param>
            <param name="controllerDescriptor"></param>
        </member>
        <member name="M:MvcTurbine.Controllers.InferredActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Always returns a <see cref="T:System.Web.Mvc.ViewResult"/> with the specified <see cref="P:MvcTurbine.Controllers.InferredActionDescriptor.ActionName"/> as the name of the view.
            For more information, see <see cref="M:System.Web.Mvc.ActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})"/>.
            </summary>
            <param name="controllerContext"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:MvcTurbine.Controllers.InferredActionDescriptor.GetParameters">
            <summary>
            Gets an one item array of <see cref="T:MvcTurbine.Controllers.InferredParameterDescriptor"/> containing the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvcTurbine.Controllers.InferredActionDescriptor.ActionName">
            <summary>
            See <see cref="P:System.Web.Mvc.ActionDescriptor.ActionName"/>.
            </summary>
        </member>
        <member name="P:MvcTurbine.Controllers.InferredActionDescriptor.ControllerDescriptor">
            <summary>
            See <see cref="P:System.Web.Mvc.ActionDescriptor.ControllerDescriptor"/>.
            </summary>
        </member>
        <member name="M:MvcTurbine.Blades.WebBlade.AddRegistrations(MvcTurbine.ComponentModel.AutoRegistrationTable)">
            <summary>
            </summary>
            <param name="registrationTable"></param>
        </member>
        <member name="M:MvcTurbine.Blades.WebBlade.InitializeModules(MvcTurbine.RotorContext)">
            <summary>
            Initializes any <see cref="T:System.Web.IHttpModule"/> from the <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> instance.
            </summary>
        </member>
        <member name="T:MvcTurbine.RotorContext">
            <summary>
            Defines the default flow of a <see cref="T:MvcTurbine.TurbineApplication"/> instance.
            </summary>
        </member>
        <member name="M:MvcTurbine.RotorContext.#ctor(MvcTurbine.ITurbineApplication)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MvcTurbine.RotorContext.Dispose">
            <summary>
            Cleans up the current <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/> associated with the context.
            </summary>
        </member>
        <member name="M:MvcTurbine.RotorContext.Initialize(MvcTurbine.ITurbineApplication)">
            <summary>
            Initializes the current context by auto-registering the default components.
            </summary>
        </member>
        <member name="M:MvcTurbine.RotorContext.InitializeComponents">
            <summary>
            Initializes the registered <see cref="T:MvcTurbine.Blades.Blade"/> instances.
            </summary>
        </member>
        <member name="M:MvcTurbine.RotorContext.Execute">
            <summary>
            Executes the current context.
            </summary>
        </member>
        <member name="M:MvcTurbine.RotorContext.RunBlades">
            <summary>
            Executes the registered <see cref="T:MvcTurbine.Blades.Blade"/> instances.
            </summary>
        </member>
        <member name="M:MvcTurbine.RotorContext.AutoRegistrationSetup">
            <summary>
            Sets up all the instances of <see cref="T:MvcTurbine.ComponentModel.IComponentRegistration"/>, <see cref="T:MvcTurbine.Routing.IRouteConfigurator"/>, 
            <see cref="T:System.Web.Mvc.IController"/> that the application uses.
            </summary>
        </member>
        <member name="M:MvcTurbine.RotorContext.GetAllBlades">
            <summary>
            Gets the list of components that are to be used for the application.
            </summary>
            <returns>A list of the components registered with the application.</returns>
        </member>
        <member name="M:MvcTurbine.RotorContext.ProcessManualRegistrations">
            <summary>
            Iterates through all the registered <see cref="T:MvcTurbine.ComponentModel.IComponentRegistration"/> instances
            </summary>
        </member>
        <member name="M:MvcTurbine.RotorContext.ProcessAutomaticRegistration">
            <summary>
            Iterates through all the <see cref="T:MvcTurbine.ComponentModel.ServiceRegistration"/> instances within 
            the <see cref="P:MvcTurbine.RotorContext.AutoRegistrations"/> table 
            and process them with the registered <see cref="T:MvcTurbine.ComponentModel.IAutoRegistrator"/> instance or 
            uses <see cref="T:MvcTurbine.ComponentModel.DefaultAutoRegistrator"/> if one is not registered.
            </summary>
        </member>
        <member name="P:MvcTurbine.RotorContext.AutoRegistrations">
            <summary>
            Gets or sets the current implementation of <see cref="T:MvcTurbine.ComponentModel.AutoRegistrationTable"/>
            that the application will use.  If null, an empty <see cref="T:MvcTurbine.ComponentModel.AutoRegistrationTable"/> is returned.
            </summary>
        </member>
        <member name="P:MvcTurbine.RotorContext.ServiceLocator">
            <summary>
            Gets or sets the current implementation of <see cref="T:MvcTurbine.ComponentModel.IServiceLocator"/>.
            </summary>
        </member>
        <member name="P:MvcTurbine.RotorContext.Application">
            <summary>
            Gets or sets the current instance of <see cref="T:MvcTurbine.TurbineApplication"/>.
            </summary>
        </member>
    </members>
</doc>
